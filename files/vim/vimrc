
" Vundle init.
set nocompatible
filetype off
set rtp+=~/.vim/bootstrap

" Set OpenGL shader language file types.
let g:glsl_file_extensions = '*.glsl,*.geom,*.vert,*.frag,*.gsh,*.vsh,*.fsh,*.vs,*.fs,*.gs,*.tcs,*.tes'

" Vundle plugins.
call vundle#begin()
Plugin 'beyondmarc/glsl.vim' " OpenGL shader language syntax highlighting
Plugin 'kien/ctrlp.vim' " let's get fuzzy!
Plugin 'lilydjwg/colorizer' " color definition highlighting
Plugin 'pangloss/vim-javascript' " javascript syntax
Plugin 'scrooloose/nerdcommenter' " commenting
Plugin 'tpope/vim-fugitive' " git wrapper
Plugin 'tpope/vim-repeat' " ability to repeat plugin actions
Plugin 'tpope/vim-surround' " surround things
Plugin 'tpope/vim-unimpaired' " some simple pair mappings
Plugin 'vim-airline/vim-airline' " status bar
Plugin 'vim-airline/vim-airline-themes' " airline themes
Plugin 'vim-scripts/cscope.vim'
call vundle#end()

" Remap leader.
let mapleader=" "

" Colors!
set t_ut=
set t_Co=256
colorscheme aurora

" Toggle colorscheme.
fun! ToggleColorScheme()
    if "aurora" ==? g:colors_name
        colorscheme industry
    else
        colorscheme aurora
    endif
endfun
nnoremap <Leader>c :call ToggleColorScheme()<CR>

" Airline.
set laststatus=2
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme = 'powerlineish'
let g:airline#extensions#tabline#enabled = 1

" Remove escape delay.
set timeoutlen=1000 ttimeoutlen=0

" Enable syntax.
syntax enable

" Clipboard
if $TMUX == ''
	set clipboard+=unnamed
endif

" Enable mouse.
set mouse=a

" Enable line numbers.
set nonumber
nmap <Leader>l :setlocal number!<CR>

" Highlight line end.
if version >= 703
	set colorcolumn=
    " Toggle column guide
    fun! ToggleColorColumn()
        if empty(&colorcolumn)
            setlocal colorcolumn=81
        else
            setlocal colorcolumn=
        endif
    endfun
    nnoremap <Leader>\ :call ToggleColorColumn()<CR>
endif

" Highlight current line only on focused window.
set cursorline
autocmd WinEnter * setlocal cursorline
autocmd BufEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline
autocmd BufLeave * setlocal nocursorline

" Tab completion.
set wildmode=longest,list,full
set wildmenu

" Indentation.
filetype plugin indent on
set expandtab
set tabstop=4
set shiftwidth=4
nmap <S-Tab> <<
imap <S-Tab> <Esc><<i

" Fix backspace.
set backspace=indent,eol,start

" Fix PGUP/PGDN.
map <silent> <PageUp> 1000<C-U>
map <silent> <PageDown> 1000<C-D>
imap <silent> <PageUp> <C-O>1000<C-U>
imap <silent> <PageDown> <C-O>1000<C-D>
set nostartofline

" Trailing whitespace.
match ErrorMsg '\s\+$'
nnoremap <Leader>rtw :%s/\s\+$//e<CR>

" Buffer mappings.
nnoremap <Leader>b :buffer 
nnoremap <Leader>n :bnext<CR>
nnoremap <Leader>p :bprevious<CR>
nnoremap <Leader><Tab> :e#<CR>
fun! BufKill()
    if len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
        bdelete
    else
        bprevious|bdelete #
    endif
endfun
nnoremap <Leader>d :call BufKill()<CR>
nnoremap <Leader>z :split<CR>
nnoremap <Leader>x :vsplit<CR>

" Sort visual.
vnoremap <Leader>s :sort<CR>

" Steal hbw's line centering mappings.
fun! ScrollToPercent(percent)
    let movelines=winheight(0)*(50-a:percent)/100
    echo movelines
    if movelines<0
        let motion='k'
        let rmotion='j'
        let movelines=-movelines
    elseif movelines>0
        let motion='j'
        let rmotion='k'
    else
        return 0
    endif
    if has('float') && type(movelines)==type(0.0)
        let movelines=float2nr(movelines)
    endif
    execute 'normal! zz'.movelines.motion.'zz'.movelines.rmotion
endfun

map zr :call ScrollToPercent(25)<CR>
map zv :call ScrollToPercent(75)<CR>

" Configure search.
set incsearch " jump while entering query
set hlsearch
nnoremap <Leader>h :noh<CR>

" Completion settings (:help ins-completion)
set complete+=i " scan current and included files
set complete+=d " scan current and included files for defined name or macro

" Toggle paste-mode.
nnoremap <Leader>v :set paste!<CR>

" Uncomment US in pacman mirrorlist.
fun! UncommentMirrorList()
    exec "silent! normal! /United States\<CR>jV/\\n\\n\<CR>:s/\#//g\<CR>:wq\<CR>"
endfun

" Sudo save shortcut.
cmap w!! w !sudo tee > /dev/null %

" Load machine-specific stuff.
if filereadable(expand("$HOME/.vimrc.loc"))
    source $HOME/.vimrc.loc
endif

