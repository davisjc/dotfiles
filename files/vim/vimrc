set nocompatible

" plugins
call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdcommenter' " commenting
Plug 'tpope/vim-fugitive' " git wrapper
Plug 'tpope/vim-repeat' " ability to repeat plugin actions
Plug 'tpope/vim-surround' " surround things
Plug 'tpope/vim-unimpaired' " some simple pair mappings
Plug 'junegunn/fzf' " fzf (another copy for vim)
Plug 'junegunn/fzf.vim' " fzf integration
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'norcalli/nvim-colorizer.lua'
Plug 'ellisonleao/gruvbox.nvim'
call plug#end()

" remap leader
let mapleader=" "

" encoding
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8

" colors!
set t_ut=
set t_Co=256
set termguicolors
if has('nvim')
lua << EOF
require("gruvbox").setup({
    bold = false,
    italic = {
        strings = false,
        comments = false,
        folds = false,
    },
    transparent_mode = true,
})
EOF
    set background=dark
    colorscheme gruvbox
else
    colorscheme aurora
endif
syntax enable

" toggle true colors
nnoremap <Leader>c :set termguicolors!<CR>

" color hex values
if has('nvim')
lua require("colorizer").setup()
endif

" tree-sitter
if has('nvim')
lua << EOF
require("nvim-treesitter.configs").setup({
    ensure_installed = {
        "c",
        "lua",
        "python",
        "rust",
    },
    highlight = {
        enable = true,
        additional_vim_regex_highlighting = false,
    },
    indent = {
        enable = true,
    },
    rainbow = {
        enable = true,
        extended_mode = true,
        max_file_lines = nil,
    }
})
EOF
endif

" lsp
if has('nvim')
lua << EOF
local assign_gutter_sym = function(label, sym)
    vim.fn.sign_define(label, {texthl = label, numhl = label, text = sym})
end
assign_gutter_sym("DiagnosticSignError", "E")
assign_gutter_sym("DiagnosticSignWarn", "W")
assign_gutter_sym("DiagnosticSignHint", "H")
assign_gutter_sym("DiagnosticSignInfo", "I")

-- don't print diagnostic text in buffer by default
vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
    vim.lsp.diagnostic.on_publish_diagnostics, {
        virtual_text = false,
    }
)

attach_init = function(client, bufnr)
    vim.opt.signcolumn = "yes" -- hold gutter open to prevent shifting cols
end
local capabilities = require("cmp_nvim_lsp").default_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = false
require("lspconfig").rust_analyzer.setup({
    on_attach = attach_init,
    capabilities = capabilities,
})
require("lspconfig").pyright.setup({
    on_attach = attach_init,
    capabilities = capabilities,
})

cmp = require("cmp")
cmp.setup({
    completion = {
        autocomplete = false,
    },
    mapping = cmp.mapping.preset.insert({
        ['<S-Tab>'] = cmp.mapping.select_prev_item(),
        ['<Tab>'] = cmp.mapping.select_next_item(),
        ['<C-b>'] = cmp.mapping.scroll_docs(-4),
        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<C-e>'] = cmp.mapping.abort(),
        ['<CR>'] = cmp.mapping.confirm(),
    }),
    sources = cmp.config.sources({
        -- order determines priority
        {name = 'nvim_lsp'},
        {name = 'buffer'},
    }),
    window = {
        completion = cmp.config.window.bordered(),
        documentation = cmp.config.window.bordered(),
    },
})
EOF
endif

" binding to pop-up diagnostic info
nnoremap <Leader>d :lua vim.diagnostic.open_float()<CR>

" airline
set laststatus=2
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme = 'powerlineish'
let g:airline#extensions#tabline#enabled = 1

" remove escape delay
set timeoutlen=1000 ttimeoutlen=0

" clipboard
if $TMUX == ''
    set clipboard+=unnamed
endif

" enable mouse
set mouse=a

" line numbers
set nonumber
nmap <Leader>l :setlocal number!<CR>

" highlight line end
if version >= 703
	set colorcolumn=
    " Toggle column guide
    fun! ToggleColorColumn()
        if empty(&colorcolumn)
            setlocal colorcolumn=80
        else
            setlocal colorcolumn=
        endif
    endfun
    nnoremap <Leader>\ :call ToggleColorColumn()<CR>
endif

" line wrap
set textwidth=80

" tab completion
set wildmode=longest,list,full
set wildmenu

" indentation
filetype plugin indent on
set autoindent
set smartindent
set expandtab
set tabstop=4
set shiftwidth=4
nmap <S-Tab> <<
imap <S-Tab> <Esc><<i

" fix backspace
set backspace=indent,eol,start

" fix PGUP/PGDN
map <silent> <PageUp> 1000<C-U>
map <silent> <PageDown> 1000<C-D>
imap <silent> <PageUp> <C-O>1000<C-U>
imap <silent> <PageDown> <C-O>1000<C-D>
set nostartofline

" trailing whitespace
match ErrorMsg '\s\+$'
nnoremap <Leader>rtw :%s/\s\+$//e<CR>

" buffer mappings.
nnoremap <Leader>n :bnext<CR>
nnoremap <Leader>p :bprevious<CR>
nnoremap <Leader><Tab> :e#<CR>
nnoremap <Leader>z :split<CR>
nnoremap <Leader>x :vsplit<CR>

" sort visual
vnoremap <Leader>s :sort<CR>

" steal hbw's line centering mappings
fun! ScrollToPercent(percent)
    let movelines=winheight(0)*(50-a:percent)/100
    echo movelines
    if movelines<0
        let motion='k'
        let rmotion='j'
        let movelines=-movelines
    elseif movelines>0
        let motion='j'
        let rmotion='k'
    else
        return 0
    endif
    if has('float') && type(movelines)==type(0.0)
        let movelines=float2nr(movelines)
    endif
    execute 'normal! zz'.movelines.motion.'zz'.movelines.rmotion
endfun

map zr :call ScrollToPercent(25)<CR>
map zv :call ScrollToPercent(75)<CR>

" configure search
set incsearch " jump while entering query
set hlsearch
set ignorecase
set smartcase
nnoremap <Leader>h :noh<CR>

" completion settings (:help ins-completion)
set complete+=i " scan current and included files
set complete+=d " scan current and included files for defined name or macro

" tags
set tags=./tags,./CTAGS,tags,CTAGS

" fzf
nnoremap <Leader>a :Ag<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>g :BCommits<CR>
nnoremap <Leader>s :BLines<CR>
nnoremap <Leader><C-]> :Tags<CR>
nnoremap <C-p> :Files<CR>

" toggle paste-mode
nnoremap <Leader>v :set paste!<CR>

" uncomment US in pacman mirrorlist.
fun! UncommentMirrorList()
    exec "silent! normal! /United States\<CR>jV/\\n\\n\<CR>:s/\#//g\<CR>:wq\<CR>"
endfun

" sudo save shortcut
cmap w!! w !sudo tee > /dev/null %

" load machine-specific stuff
if filereadable(expand("$HOME/.vimrc.loc"))
    source $HOME/.vimrc.loc
endif

