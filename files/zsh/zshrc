#
# This dotfiles setup is largely inspired by hbw's dotfiles. I was also
# frustrated by the bloat in oh-my-zsh and decided to rip out the parts I
# wanted. I still use some of the lighter-weight components of oh-my-zsh, e.g.,
# a few plugins.
#
# hbw's dotfiles: https://bitbucket.org/hbw/dotfiles-min
# oh-my-zsh: https://github.com/robbyrussell/oh-my-zsh
#
# @author: Johnathan Davis
#

export DOTFILES="$HOME/dot"
export DOTFILES_LOCAL="$HOME/dot.local"
PATH="$PATH:$DOTFILES/bin:$HOME/bin"

# colors!
source $HOME/.dir_colors
autoload -U colors && colors;

# load some plugins
plugins=(colored-man sprunge extract)
for plugin in "${plugins[@]}"; do
    source $DOTFILES/files/zsh/plugins/$plugin/$plugin.plugin.zsh
done

# zsh completion (man zshcompsys)
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' completions 1
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' format ''
zstyle ':completion:*' glob 1
zstyle ':completion:*' ignore-parents parent pwd ..
zstyle ':completion:*' insert-unambiguous false
zstyle ':completion:*' list-colors "${(@s.:.)LS_COLORS}"
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list '' '+m:{[:lower:]}={[:upper:]}' '+r:|[._-]=** r:|=**' 'l:|=* r:|=*'
zstyle ':completion:*' max-errors 3
zstyle ':completion:*' menu select=1
zstyle ':completion:*' original true
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*' substitute 1
zstyle ':completion:*' verbose true
zstyle ':completion:*:killall:*' command 'ps -u $USER -o cmd'

# zsh options (man zshoptions)
setopt always_to_end # move cursor to end of word after completion
setopt auto_pushd # automatically pushd on cd
setopt complete_in_word # perform bi-directional completion from position
setopt extended_glob # use #,~,^ for filename generation
setopt extended_history # save time info to histfile
setopt hist_ignore_space # don't write space-prefixed commands to histfile
setopt hist_verify # reload history expansion in command buffer
setopt inc_append_history # multiple zsh instances write to same histfile
setopt long_list_jobs # list jobs in long format
setopt no_match # print error when no match for filename generation
setopt notify # print status of background jobs immediately
setopt prompt_subst # perform expansion in prompts
setopt pushd_ignore_dups # don't pushd duplicate dirs
setopt pushd_silent # suppress popd output
unsetopt beep # be quiet, you..
unsetopt flow_control # don't use ctrl-s/ctrl-q for shell flow control
unsetopt share_history # favor inc_append_history

# load zsh completion
fpath+="$HOME/.zfunc"
if hash brew 2> /dev/null; then
    fpath+="$(brew --prefix)/completions/zsh"
fi
autoload -U compinit && compinit

# load some man pages
if hash rustup 2> /dev/null; then
    export MANPATH="$(rustc --print sysroot)/share/man:$MANPATH"
fi

# define zsh's definition of a "word"
autoload -U select-word-style && select-word-style bash

# compile zcompdump if necessary
if [ ~/.zcompdump -nt ~/.zcompdump.zwc -o ! -e ~/.zcompdump.zwc ]; then
    zcompile ~/.zcompdump
fi

# shell history
HISTSIZE=10000
SAVEHIST=1000

# setup vim keys (bindkey -v needs to happen before the mass key[] fix)
bindkey -v
bindkey "^?" backward-delete-char
bindkey "^W" backward-kill-word
bindkey "^H" backward-delete-char
bindkey "^U" backward-kill-line
KEYTIMEOUT=0 # don't delay esc

# fix bindings in zle (pulled from arch wiki)
typeset -A key
key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}
[[ -n "${key[Home]}"     ]]  && bindkey  "${key[Home]}"     beginning-of-line
[[ -n "${key[End]}"      ]]  && bindkey  "${key[End]}"      end-of-line
[[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"   overwrite-mode
[[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"   delete-char
[[ -n "${key[Up]}"       ]]  && bindkey  "${key[Up]}"       up-line-or-history
[[ -n "${key[Down]}"     ]]  && bindkey  "${key[Down]}"     down-line-or-history
[[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"     backward-char
[[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"    forward-char
[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"   beginning-of-buffer-or-history
[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}" end-of-buffer-or-history
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi

function precmd() {
    local _return_code="%(?.%{$fg[green]%}%{$fg[green]%}0 %{$reset_color%}.%{$fg[red]%}%{$fg[red]%}%? %{$reset_color%})"

    local _is_root=$(( 0 == $EUID ))
    local _host
    if [[ 1 == $_is_root ]]; then
        _host="%{${fg[red]}%}%n@%m%{${reset_color}%} "
    else
        _host="%{${fg[white]}%}%n@%m%{${reset_color}%} "
    fi

    if [ ! -z $SSH_CONNECTION ]; then
        _host="%{$fg[green]%}ssh://%{$reset_color%}$_host"
    fi

    local _prefix
    if [ ! -z $DOT_PROMPT_PREFIX ]; then
        _prefix="%{$fg[magenta]%}[ %{$fg[cyan]%}${DOT_PROMPT_PREFIX} %{$fg[magenta]%}]%{$reset_color%} "
    elif [ ! -z $VIRTUAL_ENV ]; then
        _prefix="%{$fg[magenta]%}[ %{$fg[cyan]%}python -> %{$fg[yellow]%}$(basename ${VIRTUAL_ENV}) %{$fg[magenta]%}]%{$reset_color%} "
    fi

    local _symbol
    if [[ 1 == $_is_root ]]; then
        _symbol="%{${fg[red]}%}#%{${reset_color}%}"
    else
        _symbol="%{${fg[yellow]}%}$%{${reset_color}%}"
    fi

    PROMPT="%{${_host}%}%{${_prefix}%}%{${fg[yellow]}%}%3~%{$reset_color%}"$'\n'
    PROMPT="$PROMPT$_return_code$_symbol%{${reset_color}%} "
    export PROMPT
    export RPROMPT
}

# fzf
hash fzf 2> /dev/null
if [ $? -eq 0 ]; then
    # CTRL-T - Paste the selected file path(s) into the command line
    __fsel() {
        local cmd="${FZF_CTRL_T_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
            -o -type f -print \
            -o -type d -print \
            -o -type l -print 2> /dev/null | cut -b3-"}"
        setopt localoptions pipefail 2> /dev/null
        eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse $FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" $(__fzfcmd) -m "$@" | while read item; do
            echo -n "${(q)item} "
        done
        local ret=$?
        echo
        return $ret
    }

    __fzf_use_tmux__() {
        [ -n "$TMUX_PANE" ] && [ "${FZF_TMUX:-0}" != 0 ] && [ ${LINES:-40} -gt 15 ]
    }

    __fzfcmd() {
        __fzf_use_tmux__ &&
            echo "fzf-tmux -d${FZF_TMUX_HEIGHT:-40%}" || echo "fzf"
    }

    fzf-file-widget() {
        LBUFFER="${LBUFFER}$(__fsel)"
        local ret=$?
        zle redisplay
        typeset -f zle-line-init >/dev/null && zle zle-line-init
        return $ret
    }
    zle     -N   fzf-file-widget
    bindkey '^T' fzf-file-widget

    # Ensure precmds are run after cd
    fzf-redraw-prompt() {
        local precmd
        for precmd in $precmd_functions; do
            $precmd
        done
        zle reset-prompt
    }
    zle -N fzf-redraw-prompt

    # ALT-C - cd into the selected directory
    fzf-cd-widget() {
        local cmd="${FZF_ALT_C_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
            -o -type d -print 2> /dev/null | cut -b3-"}"
        setopt localoptions pipefail 2> /dev/null
        local dir="$(eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse $FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS" $(__fzfcmd) +m)"
        if [[ -z "$dir" ]]; then
            zle redisplay
            return 0
        fi
        cd "$dir"
        local ret=$?
        zle fzf-redraw-prompt
        typeset -f zle-line-init >/dev/null && zle zle-line-init
        return $ret
    }
    zle     -N    fzf-cd-widget
    bindkey '\ec' fzf-cd-widget

    # CTRL-R - Paste the selected command from history into the command line
    fzf-history-widget() {
        local selected num
        setopt localoptions noglobsubst noposixbuiltins pipefail 2> /dev/null
        selected=( $(fc -l 1 | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-20%} $FZF_DEFAULT_OPTS --tac -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort $FZF_CTRL_R_OPTS --query=${(q)LBUFFER} +m" fzf) )
        local ret=$?
        if [ -n "$selected" ]; then
            num=$selected[1]
            if [ -n "$num" ]; then
                zle vi-fetch-history -n $num
            fi
        fi
        zle redisplay
        typeset -f zle-line-init >/dev/null && zle zle-line-init
        return $ret
    }
    zle     -N   fzf-history-widget
    bindkey '^R' fzf-history-widget
else
    bindkey "^R" history-incremental-search-backward
fi

# completely disable ctrl-s/ctrl-q shell flow control
stty -ixon

# aliases/functions
alias gd='git diff'
alias gds='git diff --staged'
alias gs='git status'
alias info='info --vi-keys'
alias la='ls -a'
alias ll='ls -lh'
alias lla='ls -lah'
if [ $(uname) = "Linux" ]; then
    alias ls='LC_COLLATE=C ls --color=auto --group-directories-first'
else
hash gnuls 2> /dev/null
if [ $? -eq 0 ]; then
    alias ls='LC_COLLATE=C gnuls --color=auto --group-directories-first'
fi
fi
alias tmux='tmux -2'
alias ta='tmux attach-session -t'
alias tl='tmux list-sessions'
alias tn='tmux new-session -s'
alias feh='feh -q --scale-down --image-bg black'
function gl() {
    local n=$([ -z $1 ] && echo 10 || echo $1)
    git log --pretty=oneline HEAD~$n..HEAD
}
function python-virt-activate() {
    local d=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
    if [ $# -gt 0 ]; then
        d="$1"
    fi
    d=$(readlink -f "$d")
    while [ "$d" != / ]; do
        if [ -e "$d/bin/activate" ]; then
            . "$d/bin/activate"
            alias python-virt-deactivate=deactivate
            return
        fi
        d=$(dirname "$d")
    done
    >&2 echo "error: couldn't find env"
    return 1
}

# load linux stuff
if [ -e $HOME/.zshrc.linux ]; then
    source $HOME/.zshrc.linux
fi

# load os x stuff
if [ -e $HOME/.zshrc.osx ]; then
    source $HOME/.zshrc.osx
fi

# load machine-specific stuff
if [ -e $HOME/.zshrc.loc ]; then
    source $HOME/.zshrc.loc
fi
